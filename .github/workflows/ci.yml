# CI/CD Pipeline for NSE Stock Screener
# This workflow runs on every push and pull request to ensure code quality

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC to catch any dependency issues
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy
        pip install -r requirements.txt
        
    - name: Lint with Ruff
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        ruff check src/ tests/ --select=E9,F63,F7,F82 --show-source
        # Check all files with Ruff
        ruff check src/ tests/ --statistics
        
    - name: Format check with Ruff
      run: |
        ruff format --check src/ tests/
        
    - name: Type checking with MyPy
      run: |
        mypy src/ --ignore-missing-imports --show-error-codes
      continue-on-error: true  # Allow to continue if type checking has issues
      
    - name: Security check with Bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=test-results.xml \
          -m "unit" \
          --tb=short
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run integration tests
      run: |
        pytest tests/ -v \
          -m "integration" \
          --tb=short \
          --timeout=300
      env:
        NSE_SCREENER_ENV: test
        
    - name: Test import structure
      run: |
        python -c "
        import sys
        sys.path.append('src')
        try:
            from enhanced_early_warning_system import main
            from advanced_indicators import compute_all_indicators  
            from composite_scorer import CompositeScorer
            from risk_manager import RiskManager
            from advanced_backtester import AdvancedBacktester
            print('✅ All core modules import successfully')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

  # Job 4: Build and Test Docker Image
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: nse-screener:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Test that the image runs and dependencies are installed
        docker run --rm nse-screener:test python -c "
        import pandas as pd
        import numpy as np
        import yfinance as yf
        import matplotlib.pyplot as plt
        print('✅ Core dependencies available in Docker image')
        "
        
    - name: Test application in Docker
      run: |
        # Test basic functionality
        docker run --rm -v ${{ github.workspace }}/tests:/app/tests nse-screener:test \
          python -m pytest tests/test_indicators.py -k "test_rsi_basic" -v

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler
        
    - name: Run performance tests
      run: |
        pytest tests/ -v \
          -m "slow" \
          --tb=short \
          --timeout=600
          
    - name: Memory profiling
      run: |
        python -m memory_profiler tests/test_performance.py || echo "Performance tests completed"
      continue-on-error: true

  # Job 6: Security and Dependency Scanning
  security-scan:
    name: Security and Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -r requirements.txt
        
    - name: Safety check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Pip audit for vulnerabilities
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scans
        path: |
          safety-report.json
          pip-audit-report.json

  # Job 7: Documentation Build
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt
        
    - name: Build documentation
      run: |
        mkdir -p docs/build
        sphinx-quickstart -q -p "NSE Stock Screener" -a "Team" --ext-autodoc docs/source || true
        # For now, just create a simple README-based documentation
        echo "# NSE Stock Screener Documentation" > docs/build/index.md
        echo "Documentation build placeholder completed"
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation
        path: docs/build/

  # Job 8: Deployment Preparation (only on main branch)
  deploy-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      continue-on-error: true
      
    - name: Build and push Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ secrets.DOCKER_HUB_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/nse-screener:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/nse-screener:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true
      
    - name: Create release assets
      run: |
        mkdir -p release-assets
        
        # Create deployment package
        tar -czf release-assets/nse-screener-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          .
          
        # Create checksums
        cd release-assets
        sha256sum *.tar.gz > checksums.txt
        
    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/

  # Job 9: Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, docker-build]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine overall status
      id: status
      run: |
        # Check if any required jobs failed
        CODE_QUALITY="${{ needs.code-quality.result }}"
        UNIT_TESTS="${{ needs.unit-tests.result }}"
        INTEGRATION_TESTS="${{ needs.integration-tests.result }}"
        DOCKER_BUILD="${{ needs.docker-build.result }}"
        
        if [[ "$CODE_QUALITY" == "success" && "$UNIT_TESTS" == "success" && 
              "$INTEGRATION_TESTS" == "success" && "$DOCKER_BUILD" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All CI checks passed successfully! ✅" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Some CI checks failed. Please review the results. ❌" >> $GITHUB_OUTPUT
        fi
        
    - name: Create summary
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Message:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests:** ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests:** ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build:** ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY