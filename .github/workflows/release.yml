# Release Pipeline for NSE Stock Screener
# Triggered when a new tag is pushed or a release is created

name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.0, v2.1.3, etc.
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Create Release Build
  release-build:
    name: Create Release Build
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper version detection
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Extract version from tag
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="development"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
        pip install -r requirements.txt
        
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "0.1.0"/version = "${{ steps.version.outputs.version }}"/g' pyproject.toml
        
    - name: Run full test suite
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Build Python package
      run: |
        python -m build
        
    - name: Create release package
      run: |
        mkdir -p release-artifacts
        
        # Copy built packages
        cp dist/* release-artifacts/
        
        # Create source archive
        git archive --format=tar.gz --prefix=nse-screener-${{ steps.version.outputs.version }}/ \
          HEAD > release-artifacts/nse-screener-${{ steps.version.outputs.version }}-source.tar.gz
          
        # Create deployment package (without .git, tests, etc.)
        tar -czf release-artifacts/nse-screener-${{ steps.version.outputs.version }}-deployment.tar.gz \
          --exclude='.git*' \
          --exclude='tests' \
          --exclude='__pycache__' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='*.pyc' \
          src/ requirements.txt pyproject.toml Dockerfile docker-compose.yml README.md
          
        # Generate checksums
        cd release-artifacts
        sha256sum * > checksums.txt
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: release-artifacts/
        
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: NSE Stock Screener ${{ steps.version.outputs.version }}
        body: |
          ## NSE Stock Screener Release ${{ steps.version.outputs.version }}
          
          ### üöÄ What's New
          - Production-ready stock screening system
          - Comprehensive technical analysis indicators
          - Advanced risk management and position sizing
          - Backtesting capabilities with realistic transaction costs
          - Docker containerization for easy deployment
          
          ### üì¶ Package Contents
          - `nse-screener-${{ steps.version.outputs.version }}-py3-none-any.whl`: Python wheel package
          - `nse-screener-${{ steps.version.outputs.version }}.tar.gz`: Source distribution
          - `nse-screener-${{ steps.version.outputs.version }}-deployment.tar.gz`: Deployment package
          - `nse-screener-${{ steps.version.outputs.version }}-source.tar.gz`: Full source archive
          - `checksums.txt`: SHA256 checksums for all packages
          
          ### üê≥ Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository_owner }}/nse-screener:${{ steps.version.outputs.version }}
          ```
          
          ### üìñ Installation
          ```bash
          pip install nse-screener-${{ steps.version.outputs.version }}-py3-none-any.whl
          ```
          
          ### üîß Quick Start
          ```bash
          # Extract deployment package
          tar -xzf nse-screener-${{ steps.version.outputs.version }}-deployment.tar.gz
          cd nse-screener-${{ steps.version.outputs.version }}
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Run analysis
          python -m src.enhanced_early_warning_system
          ```
          
          ### ‚ö†Ô∏è Requirements
          - Python 3.9+
          - See `requirements.txt` for dependencies
          
          ### üìù Changelog
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  # Job 2: Build and Push Docker Images
  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: release-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Log in to Docker Hub
      if: secrets.DOCKER_HUB_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      continue-on-error: true
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
          ${{ secrets.DOCKER_HUB_USERNAME != '' && format('{0}/nse-screener', secrets.DOCKER_HUB_USERNAME) || '' }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.release-build.outputs.version }}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.release-build.outputs.version }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}

  # Job 3: Upload Release Assets
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [release-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts-${{ needs.release-build.outputs.version }}
        path: release-artifacts/
        
    - name: Upload Python Wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release-build.outputs.upload_url }}
        asset_path: release-artifacts/nse_screener-${{ needs.release-build.outputs.version }}-py3-none-any.whl
        asset_name: nse-screener-${{ needs.release-build.outputs.version }}-py3-none-any.whl
        asset_content_type: application/octet-stream
      continue-on-error: true
      
    - name: Upload Source Distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release-build.outputs.upload_url }}
        asset_path: release-artifacts/nse-screener-${{ needs.release-build.outputs.version }}.tar.gz
        asset_name: nse-screener-${{ needs.release-build.outputs.version }}.tar.gz
        asset_content_type: application/gzip
      continue-on-error: true
      
    - name: Upload Deployment Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release-build.outputs.upload_url }}
        asset_path: release-artifacts/nse-screener-${{ needs.release-build.outputs.version }}-deployment.tar.gz
        asset_name: nse-screener-${{ needs.release-build.outputs.version }}-deployment.tar.gz
        asset_content_type: application/gzip
      continue-on-error: true
      
    - name: Upload Source Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release-build.outputs.upload_url }}
        asset_path: release-artifacts/nse-screener-${{ needs.release-build.outputs.version }}-source.tar.gz
        asset_name: nse-screener-${{ needs.release-build.outputs.version }}-source.tar.gz
        asset_content_type: application/gzip
      continue-on-error: true
      
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release-build.outputs.upload_url }}
        asset_path: release-artifacts/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
      continue-on-error: true

  # Job 4: PyPI Publishing (optional)
  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [release-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(needs.release-build.outputs.version, 'alpha') && !contains(needs.release-build.outputs.version, 'beta')
    environment: pypi
    
    steps:
    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts-${{ needs.release-build.outputs.version }}
        path: release-artifacts/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: release-artifacts/
        skip_existing: true
      continue-on-error: true

  # Job 5: Release Notification
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release-build, docker-release, upload-assets]
    if: always()
    
    steps:
    - name: Create release summary
      run: |
        echo "## üéâ Release ${{ needs.release-build.outputs.version }} Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Artifacts Created:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Python packages (wheel + source distribution)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Docker images (multi-platform)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Deployment packages" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Source archives" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üê≥ Docker Images:" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository }}:${{ needs.release-build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Usage:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ghcr.io/${{ github.repository }}:${{ needs.release-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -v \$(pwd)/data:/app/data -v \$(pwd)/output:/app/output ghcr.io/${{ github.repository }}:${{ needs.release-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY