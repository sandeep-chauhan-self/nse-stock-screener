# NSE Stock Screener - CI/CD Pipeline with Security Scanning
# GitHub Actions workflow for secure deployment

name: NSE Stock Screener - Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nse-stock-screener
  PYTHON_VERSION: '3.11'

jobs:
  # 1. Security and quality checks
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install --upgrade pip
        pip install bandit safety semgrep pip-audit
        pip install -r src/security/requirements-security.txt
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
    
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run pip-audit for vulnerabilities
      run: |
        pip-audit --desc --format=json --output=pip-audit-report.json || true
        pip-audit --desc
    
    - name: Run Semgrep security scan
      if: github.event_name != 'schedule'
      run: |
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        semgrep --config=auto src/
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          semgrep-report.json
        retention-days: 30
    
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## ðŸ”’ Security Scan Results\n\n';
          
          // Check if security reports exist and summarize
          try {
            if (fs.existsSync('bandit-report.json')) {
              const bandit = JSON.parse(fs.readFileSync('bandit-report.json'));
              const high = bandit.metrics._totals?.CONFIDENCE.HIGH || 0;
              const medium = bandit.metrics._totals?.CONFIDENCE.MEDIUM || 0;
              comment += `**Bandit**: ${high} high, ${medium} medium confidence issues\n`;
            }
            
            if (fs.existsSync('safety-report.json')) {
              const safety = JSON.parse(fs.readFileSync('safety-report.json'));
              const vulns = safety.vulnerabilities?.length || 0;
              comment += `**Safety**: ${vulns} dependency vulnerabilities\n`;
            }
            
            comment += '\nðŸ“Š Full reports available in artifacts.';
          } catch (e) {
            comment += 'Security scan completed. Check artifacts for details.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # 2. Code quality and testing
  test-and-quality:
    name: Tests and Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r src/security/requirements-security.txt
        pip install pytest pytest-cov black flake8 mypy
    
    - name: Run code formatting check
      run: |
        black --check src/ --diff
    
    - name: Run linting
      run: |
        flake8 src/ --max-line-length=100 --ignore=E203,W503
    
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # 3. Container security scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ${{ env.IMAGE_NAME }}:test
        build-args: |
          BUILD_DATE=${{ github.run_id }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:test
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Docker Scout security scan
      if: github.event_name != 'schedule'
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ env.IMAGE_NAME }}:test
        only-severities: critical,high
        write-comment: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Test container health check
      run: |
        docker run --rm -d --name test-container ${{ env.IMAGE_NAME }}:test
        sleep 30
        docker exec test-container python healthcheck.py --json
        docker stop test-container

  # 4. Infrastructure as Code security
  iac-security:
    name: Infrastructure Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov IaC security scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
        soft_fail: true
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif
    
    - name: Validate Docker Compose configuration
      run: |
        docker-compose config --quiet
        echo "âœ… Docker Compose configuration is valid"

  # 5. Build and push secure container
  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [security-scan, test-and-quality, container-security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # 6. Deploy to staging (if main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "ðŸš€ Deploying to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest"
        # Add actual deployment commands here
        # Example: kubectl, docker-compose, terraform, etc.
    
    - name: Run post-deployment security tests
      run: |
        echo "ðŸ”’ Running post-deployment security tests"
        # Add security validation tests
        # Example: API security tests, configuration validation
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Staging deployment successful"
        # Add notification logic (Slack, email, etc.)

  # 7. Security compliance report
  compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    needs: [security-scan, container-security, iac-security]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate compliance report
      run: |
        echo "# Security Compliance Report" > compliance-report.md
        echo "**Date**: $(date)" >> compliance-report.md
        echo "**Commit**: ${{ github.sha }}" >> compliance-report.md
        echo "**Workflow**: ${{ github.run_id }}" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Security Scans Completed" >> compliance-report.md
        echo "- [x] Static code analysis (Bandit)" >> compliance-report.md
        echo "- [x] Dependency vulnerability scan (Safety)" >> compliance-report.md
        echo "- [x] Container image scan (Trivy)" >> compliance-report.md
        echo "- [x] Infrastructure scan (Checkov)" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Compliance Status" >> compliance-report.md
        echo "âœ… All security scans completed successfully" >> compliance-report.md
        echo "ðŸ“Š Detailed reports available in workflow artifacts" >> compliance-report.md
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md
        retention-days: 90