# Bandit configuration for NSE Stock Screener
# Security linting configuration

[bandit]
# Paths to exclude from security scanning
exclude_dirs = [
    "tests",
    "docs", 
    "scripts",
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "htmlcov",
    "build",
    "dist"
]

# Skips to apply globally
skips = [
    "B101",  # Skip assert_used test - asserts are OK in our domain
    "B601",  # Skip shell injection check for subprocess with shell=True - we control the input
    "B602",  # Skip subprocess_popen_with_shell_equals_true - we control the input
]

# Tests to include (empty means all tests)
tests = []

# Confidence levels: LOW, MEDIUM, HIGH
confidence = "MEDIUM"

# Severity levels: LOW, MEDIUM, HIGH  
severity = "MEDIUM"

# Format for output: csv, json, txt, xml, yaml
format = "txt"

# Generate a detailed report
verbose = true

# Recursive scan
recursive = true

# Aggregate output by vulnerability type
aggregate = "vuln"

# Number of lines of context to include
context_lines = 3

# Patterns to exclude
[bandit.exclude_patterns]
# Exclude test files - they may have intentionally insecure code for testing
exclude = [
    "*/test_*.py",
    "*_test.py", 
    "tests/*",
    "*/tests/*",
    # Exclude demo files that may have simplified security
    "demo_*.py",
    "*/demo_*.py",
    # Exclude check_deps which intentionally uses subprocess
    "check_deps.py"
]

# Plugin configurations
[bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle", 
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
    "os.spawnlp",
    "os.spawnlpe",
    "os.spawnv",
    "os.spawnve",
    "os.spawnvp",
    "os.spawnvpe",
    "os.startfile"
]

shell = [
    "os.system",
    "os.popen",
    "os.popen2",
    "os.popen3",
    "os.popen4",
    "popen2.popen2",
    "popen2.popen3",
    "popen2.popen4",
    "popen2.Popen3",
    "popen2.Popen4",
    "commands.getoutput",
    "commands.getstatusoutput"
]

subprocess = [
    "subprocess.Popen",
    "subprocess.call",
    "subprocess.check_call",
    "subprocess.check_output",
    "subprocess.run"
]

# Financial domain specific security considerations
[bandit.financial_data_checks]
# Patterns that are acceptable in financial analysis context
acceptable_patterns = [
    # Network requests for financial data
    "requests.get",
    "requests.post", 
    "urllib.request.urlopen",
    "yfinance",
    
    # File operations for data persistence
    "pickle.load",
    "pickle.dump",
    "pandas.read_csv",
    "pandas.to_csv",
    
    # Eval usage in specific financial calculation contexts (still flagged but noted)
    "eval",  # Should be avoided but may be needed for dynamic indicator calculations
]

# High-risk patterns that should always be flagged
high_risk_patterns = [
    "exec", 
    "input",  # Raw input in production code
    "compile",
    "__import__",
    "tempfile.mktemp",  # Use mkstemp instead
]