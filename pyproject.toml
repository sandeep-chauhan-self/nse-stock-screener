[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nse-stock-screener"
version = "0.1.0"
description = "Probabilistic stock screening system for NSE-listed stocks using technical indicators and risk management"
authors = [
    {name = "NSE Stock Screener Team", email = "developer@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9,<4.0"
keywords = ["stocks", "trading", "technical-analysis", "nse", "screening"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Information Analysis"
]

dependencies = [
    "pandas>=2.0.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "matplotlib>=3.6.0,<4.0.0",
    "seaborn>=0.12.0,<1.0.0",
    "yfinance>=0.2.18,<1.0.0",
    "requests>=2.28.0,<3.0.0",
    "beautifulsoup4>=4.11.0,<5.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "pytz>=2022.7",
    "pydantic>=2.0.0,<3.0.0",
    "structlog>=23.0.0,<24.0.0",
    "rich>=13.0.0,<14.0.0",
    "psutil>=5.9.0,<6.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "memory-profiler>=0.61.0,<1.0.0"
]
advanced = [
    "ta-lib>=0.4.26,<1.0.0",
    "scikit-learn>=1.3.0,<2.0.0"
]
production = [
    "gunicorn>=21.0.0,<22.0.0",
    "uvicorn>=0.23.0,<1.0.0"
]

[project.urls]
Homepage = "https://github.com/your-org/nse-stock-screener"
Repository = "https://github.com/your-org/nse-stock-screener"
Documentation = "https://your-org.github.io/nse-stock-screener"
"Bug Tracker" = "https://github.com/your-org/nse-stock-screener/issues"

[project.scripts]
nse-screen = "src.enhanced_early_warning_system:main"
nse-backtest = "src.advanced_backtester:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-dir]
"" = "."

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "RUF",  # Ruff-specific rules
]
ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class  
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "E501",   # Line too long (handled by black)
    "S101",   # Use of assert detected (common in tests)
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PD901",  # df is a bad variable name (pandas convention)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default arg in function definition
    "COM812",  # Trailing comma missing (handled by black)
    "ISC001",  # Implicitly concatenated string literals (handled by black)
    "T201",    # Print found (allowed for now)
    "T203",    # pprint found (allowed for now)
    "B008",    # do not perform function calls in argument defaults
    "B905",    # zip without explicit strict parameter
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
    "scripts",
    "docs/_build",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
    "ARG001",  # Unused function argument
    "D",       # All docstring rules
    "FBT",     # Boolean trap rules
    "SLF001",  # Private member accessed
    "PLR0913", # Too many arguments
    "N802",    # Function name should be lowercase
    "N806",    # Variable in function should be lowercase
    "B011",    # assert False in tests is fine
]
"src/check_deps.py" = ["T201", "S602", "S607"]  # Allow print and subprocess
"src/demo_*.py" = ["T201", "INP001"]  # Allow print in demo files
"scripts/**/*.py" = ["T201", "S602", "S607", "INP001"]  # Allow print and subprocess in scripts

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["src"]
force-single-line = false
force-sort-within-sections = true
lines-after-imports = 2
known-third-party = [
    "pandas",
    "numpy",
    "matplotlib", 
    "seaborn",
    "yfinance",
    "requests",
    "bs4",
    "scipy",
    "pytest",
    "jinja2",
    "openpyxl",
]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, then tighten
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "matplotlib.*",
    "seaborn.*",
    "ta",
    "sklearn.*",
    "scipy.*",
    "requests.*",
    "bs4.*",
    "beautifulsoup4.*",
    "talib.*",
    "jinja2.*",
    "openpyxl.*",
    "plotly.*",
    "kaleido.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.backtest.*"
disallow_untyped_defs = true  # Stricter for new FS.6 code

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests (may fetch live data)",
    "requires_network: Tests that require network access",
    "requires_talib: Tests that require TA-Lib library",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*yfinance.*:UserWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "src/demo_*",
    "src/check_deps.py",
    "scripts/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"